

def snake_checker(snake, n):

    node_snake = transition_to_node(snake, n)

    for j in range(1, len(node_snake)):
        node = node_snake[j]
        old_node = node_snake[j-1]
        for k in range(n):
            neighbour_check = list(node)

            if neighbour_check[k] == "0":
                neighbour_check[k] = "1"
            else:
                neighbour_check[k] = "0"
            neighbour_check = ''.join(neighbour_check)

            if neighbour_check in node_snake[:j] and neighbour_check != old_node:
                print("Invalid transition sequence.")
                print(node)
                print(neighbour_check)
                exit()
    print("Valid transition sequence")
    return


def transition_to_node(snake, n):

    start = format(0, f"0{n}b")

    node_path = [start]

    for x in snake:
        if x >= n:
            print("Invalid transition sequence: too high for this dimension")
            exit()
        new_node = list(node_path[-1])

        if new_node[n-1-x] == "1":
            new_node[n-1-x] = "0"
        else:
            new_node[n-1-x] = "1"

        new_node = ''.join(new_node)

        node_path.append(new_node)

    print(node_path)
    return node_path


# record dimension 11 snake
transition_sequence = [0, 1, 2, 3, 0, 1, 4, 0, 3, 5, 4, 0, 1, 4, 5, 2, 3, 5, 4, 1, 0, 4, 6, 3, 5, 0, 3, 4, 1, 3, 2, 1, 0, 3, 5, 0, 1, 4, 5, 0, 3, 5, 4, 2,
                       3, 7, 1, 5, 3, 1, 2, 3, 0, 1, 4, 0, 3, 5, 4, 0, 1, 4, 5, 2, 3, 5, 1, 6, 5, 0, 3, 5, 4, 1, 2, 4, 5, 3, 0, 5, 4, 1, 0, 5, 3, 0, 1, 2,
                       3, 0, 8, 2, 0, 1, 4, 0, 3, 5, 4, 0, 1, 4, 5, 2, 3, 5, 4, 1, 0, 4, 6, 5, 0, 4, 1, 3, 2, 1, 0, 3, 5, 0, 1, 4, 5, 0, 3, 5, 4, 2, 1, 7,
                       2, 4, 5, 3, 0, 5, 2, 4, 1, 3, 2, 4, 5, 2, 0, 4, 2, 3, 5, 4, 2, 6, 4, 3, 2, 4, 5, 3, 0, 5, 4, 1, 0, 5, 3, 0, 1, 2, 3, 1, 4, 0, 3, 5,
                       0, 8, 9, 0, 5, 3, 0, 4, 1, 3, 2, 1, 0, 3, 5, 0, 1, 4, 5, 0, 3, 5, 4, 2, 3, 4, 6, 2, 4, 5, 3, 2, 4, 0, 2, 5, 4, 2, 3, 1, 4, 2, 5, 0,
                       3, 5, 4, 2, 7, 1, 2, 4, 5, 3, 0, 5, 4, 1, 0, 5, 3, 0, 1, 2, 3, 1, 4, 0, 5, 6, 4, 0, 1, 3, 2, 1, 0, 4, 5, 3, 0, 4, 1, 0, 3, 2, 1, 0,
                       4, 1, 3, 0, 8, 2, 0, 5, 4, 1, 0, 5, 3, 0, 1, 2, 3, 1, 4, 5, 6, 1, 5, 3, 2, 5, 4, 1, 0, 4, 5, 3, 0, 4, 1, 0, 3, 2, 1, 3, 5, 1, 7, 3,
                       2, 4, 5, 3, 0, 5, 4, 1, 0, 5, 3, 0, 1, 2, 3, 1, 4, 3, 0, 5, 3, 6, 4, 0, 1, 4, 5, 3, 2, 5, 4, 1, 0, 4, 5, 3, 0, 4, 1, 0, 3, 2, 1, 0,
                       10, 8, 0, 1, 2, 3, 0, 1, 4, 0, 3, 5, 4, 0, 1, 4, 5, 2, 3, 5, 4, 1, 0, 4, 6, 3, 5, 0, 3, 4, 1, 3, 2, 1, 0, 3, 5, 0, 1, 4, 5, 0, 3, 5,
                       4, 2, 3, 7, 1, 5, 3, 1, 2, 3, 0, 1, 4, 0, 3, 5, 4, 0, 1, 4, 5, 2, 3, 5, 1, 6, 5, 0, 3, 5, 4, 1, 2, 4, 5, 3, 0, 5, 4, 1, 0, 5, 3, 0,
                       1, 2, 3, 0, 8, 2, 0, 1, 4, 0, 3, 5, 4, 0, 1, 4, 5, 2, 3, 5, 4, 1, 0, 4, 6, 5, 0, 4, 1, 3, 2, 1, 0, 3, 5, 0, 1, 4, 5, 0, 3, 5, 4, 2,
                       1, 7, 2, 4, 5, 3, 0, 5, 2, 4, 1, 3, 2, 4, 5, 2, 0, 4, 2, 3, 5, 4, 2, 6, 4, 3, 2, 4, 5, 3, 0, 5, 4, 1, 0, 5, 2, 4, 3, 5, 0, 7, 6, 9,
                       3, 1, 5, 3, 2, 5, 4, 1, 0, 4, 5, 3, 0, 4, 1, 0, 3, 2, 1, 3, 5, 1, 7, 3, 2, 4, 5, 3, 0, 5, 4, 1, 0, 5, 3, 0, 1, 2, 3, 1, 4, 3, 0, 5,
                       3, 6, 4, 0, 1, 4, 5, 3, 2, 5, 4, 1, 0, 4, 5, 3, 0, 4, 1, 0, 2, 8, 0, 3, 2, 1, 0, 3, 5, 0, 1, 4, 5, 0, 3, 5, 4, 2, 1, 4, 5, 0, 3, 5,
                       6, 4, 0, 5, 3, 1, 2, 3, 0, 1, 4, 3, 7, 4, 1, 2, 3, 1, 4, 0, 3, 5, 4, 1, 2, 4, 5, 3, 0, 5, 4, 1, 0, 4, 7, 3, 4, 0, 1, 4, 2, 5, 3, 0,
                       5, 6, 7, 0, 4, 1, 0, 5, 3, 1, 4, 0, 2, 5, 4, 1, 0, 4, 5, 3, 0, 4, 1, 0, 5, 8, 1, 5, 3, 0, 4, 5, 3, 1, 5, 0, 2, 1, 0, 4, 1, 3, 5, 1,
                       0, 4, 1, 10, 9, 1, 4, 0]


snake_checker(transition_sequence, 11)
